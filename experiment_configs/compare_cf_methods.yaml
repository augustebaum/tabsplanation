seed: 42
# Using variable interpolation, we can
# define common dependencies just once and re-use them
data:
  seed: ${seed}
  gaussian: false
  nb_points_initial: 100000
  nb_dims: 2
  nb_uncorrelated_dims: 2
data_module:
  validation_data_proportion: 0.2
  test_data_proportion: 0.2
  batch_size: 200
training:
  patience: 2
  max_epochs: -1
models:
  classifier:
    seed: ${seed}
    data: ${data}
    data_module: ${data_module}
    training: ${training}
    model:
      class_name: Classifier
      args:
        # TODO: Make this parameter given by data?
        output_dim: 3
        hidden_dims: [50, 50]
        batch_norm: False
        dropout: null
        learning_rate: 1e-3
  autoencoder:
    seed: ${seed}
    data: ${data}
    data_module: ${data_module}
    training: ${training}
    model:
      class_name: NICEModel
      args:
        # Go get the input dim from autoencoder.data
        input_dim: ${...data.nb_dims}
        mlp_hidden_dims: [50, 50, 50, 50]
        batch_norm: False
        dropout: null
        learning_rate: 1e-3
methods:
  - class_name: LatentShift
    args:
      classifier: ${models.classifier}
      autoencoder: ${models.autoencoder}
      hparams:
        shift_step: 0.005
        max_iter: 100
  - class_name: Revise
    args:
      classifier: ${models.classifier}
      autoencoder: ${models.autoencoder}
      hparams:
        optimizer: adam
        lr: 0.1
        max_iter: 1000
        distance_regularization: 0.5
plot_data_class_2_paths:
  nb_points: 20
  path_algorithm: make_path
